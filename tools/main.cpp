
#include "cppscanner/index/reference.h"
#include "cppscanner/index/symbolkind.h"

#include <fstream>
#include <iostream>
#include <string>
#include <vector>

std::vector<std::string> module_exports;

void write_symbolKinds(std::ofstream& stream)
{
  size_t count = 0;
  std::vector<cppscanner::SymbolKind> names;

  cppscanner::enumerateSymbolKind([&names, &count](cppscanner::SymbolKind k) {
    auto offset = static_cast<size_t>(k);
    if (offset >= names.size()) {
      names.resize(offset + 1, cppscanner::SymbolKind::Unknown);
    }
    names[offset] = k;
    ++count;
    });

  stream << "const symbolKinds = {" << std::endl;
  stream << "  names: [" << std::endl;
  for (size_t i(0); i < names.size(); ++i) {
    stream << "    \"" << cppscanner::getSymbolKindString(names.at(i)) << "\"";
    if (i != names.size() - 1) {
      stream << ",";
    }
    stream << std::endl;
  }
  stream << "  ]," << std::endl;
  stream << "  values: {" << std::endl;
  cppscanner::enumerateSymbolKind([&stream, &names, &count](cppscanner::SymbolKind k) {
    stream << "    \"" << cppscanner::getSymbolKindString(k) << "\": " << static_cast<int>(k);
    if (--count > 0) {
      stream << ",";
    }
    stream << std::endl;
    });
  stream << "  }" << std::endl;
  stream << "};" << std::endl;

  module_exports.push_back("symbolKinds");
}

void write_sqlQueries(std::ofstream& stream)
{
  stream << "const selectNamespaceQuery = \"SELECT id, parent, name FROM symbol WHERE kind = "
    << static_cast<int>(cppscanner::SymbolKind::Namespace)
    << " OR kind = "
    << static_cast<int>(cppscanner::SymbolKind::InlineNamespace)
    << "\";" << std::endl;

  module_exports.push_back("selectNamespaceQuery");
}

void write_flagFunctions(std::ofstream& stream)
{
  stream << "function symbolReference_isImplicit(symRef) {" << std::endl;
  stream << "  return (symRef.flags & " << static_cast<int>(cppscanner::SymbolReference::Implicit) << ") != 0; " << std::endl;
  stream << "}" << std::endl;

  module_exports.push_back("symbolReference_isImplicit");
}

int main(int argc, char* argv[])
{
  std::ofstream stream{ "symbolkind.cjs", std::ios::out | std::ios::trunc };

  stream << "// This file was generated by cppscanner." << std::endl;
  stream << "// All modifications will be lost." << std::endl;
  stream << std::endl;

  write_symbolKinds(stream);
  stream << std::endl;
  write_sqlQueries(stream);
  stream << std::endl;
  write_flagFunctions(stream);

  // write module.exports
  stream << std::endl;
  stream << "module.exports = {" << std::endl;
  for (size_t i(0); i < module_exports.size(); ++i) {
    stream << "  " << module_exports.at(i);

    if (i != module_exports.size() - 1) {
      stream << ",";
    }

    stream << std::endl;
  }
  stream << "};";
}
